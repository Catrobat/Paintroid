//noinspection GradleDependency
apply plugin: 'com.android.application'
apply from: 'adb_tasks.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.1'

    defaultConfig {
        applicationId "org.catrobat.paintroid"
        minSdkVersion 16
        targetSdkVersion 22
        testApplicationId "org.catrobat.paintroid.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        testInstrumentationRunner "pl.polidea.instrumentation.PolideaInstrumentationTestRunner"
        versionCode 18
        versionName "1.1.15"
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }

            resources {
                srcDir 'src/main/res'
            }

        }

        androidTest {
            if (file('../testexclusions.txt').exists()) {
                java.exclude file('../testexclusions.txt').readLines()
            }
        }
    }

    lintOptions {
        ignore 'MissingTranslation'
        disable "ResourceType"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

}

ext {
    espressoVersion = "2.2.2"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.jaredrummler:material-spinner:1.1.0'
    compile 'com.getkeepsafe.taptargetview:taptargetview:1.9.1'


    androidTestCompile('junit:junit:4.10') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.6.3'
    androidTestCompile files('libs/the-missing-android-xml-junit-test-runner-release-1.3_2.jar')

    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'espresso-core'
        exclude module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude module: 'rules'
        exclude module: 'javax.annotation-api'
        exclude module: 'support-annotations'
    }

    androidTestCompile ('com.android.support.test.espresso:espresso-intents:2.2.2') {
        exclude module: 'support-annotations'
    }

}

    // Note that espresso-idling-resource is used in the code under test.
//    compile "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion";


task grantAnimationPermission(type: Exec, dependsOn: ['installDebug']) {
    println "Granting SET_ANIMATION_SCALE permission"

    def stdOut = new ByteArrayOutputStream()

    ignoreExitValue true
    commandLine android.getAdbExe().toString(), 'shell',  'pm',  'grant', 'org.catrobat.paintroid', 'android.permission.SET_ANIMATION_SCALE'

    standardOutput = stdOut

    println stdOut.toString().trim()
}

tasks.whenTaskAdded { task ->
    if(task.name.startsWith('connected')) {
        task.dependsOn grantAnimationPermission
    }
}

if (project.hasProperty('jenkins')) {
    project.android.dexOptions.preDexLibraries = false
}
//else {
//    //not a jenkins build, remove animation scale permission
//    android.applicationVariants.all { variant ->
//        println "Removing the SET_ANIMATION_SCALE permission for $variant.name"
//
//        variant.outputs[0].processManifest.doLast {
//            def generatedContent = manifestOutputFile.getText()
//            generatedContent = generatedContent.replace('<uses-permission android:name="android.permission.SET_ANIMATION_SCALE" />', '')
//            if (generatedContent.contains('SET_ANIMATION_SCALE')) {
//                throw new RuntimeException("Error in removing animation scale permission!")
//            }
//            manifestOutputFile.write(generatedContent)
//        }
//    }
//}
