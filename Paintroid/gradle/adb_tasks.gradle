/**
 *  Paintroid: An image manipulation application for Android.
 *  Copyright (C) 2010-2015 The Catrobat Team
 *  (<http://developer.catrobat.org/credits>)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.catrobat.gradle.androidemulators:android-emulators-gradle:1.0.1'
    }
}

import org.catrobat.gradle.androidemulators.Adb
import org.catrobat.gradle.androidemulators.AndroidDevice

Adb adb() {
    new Adb(android.getAdbExecutable())
}

def androidDevice(String androidSerial = null) {
    new AndroidDevice(adb(), androidSerial)
}

def createAdbInstallTask(variant) {
    task ("commandlineAdbInstall${variant.name.capitalize()}") {
        doLast {
            androidDevice().install(variant.outputs[0].outputFile.path)
        }
    }
}

android.libraryVariants.all { variant ->
    createAdbInstallTask(variant)
}

android.testVariants.all { variant ->
    createAdbInstallTask(variant)
}

task commandlineAdbRunTests {
    doLast {
        def device = androidDevice()

        def cmd = device.command(['shell', 'am', 'instrument', '-w', '-e', 'junitOutputDirectory', '/mnt/sdcard/testresults'])
        cmd.addOptionalArguments(System.properties['noDeviceTests'], ['-e', 'notAnnotation', 'org.catrobat.catroid.uitest.annotation.Device'])
        cmd.addOptionalArguments(System.properties['onlyDeviceTests'], ['-e', 'annotation', 'org.catrobat.catroid.uitest.annotation.Device'])
        cmd.addOptionalArguments(System.properties['testClass'], ['-e', 'class', System.properties['testClass'].toString()])
        cmd.addOptionalArguments(System.properties['testPackage'], ['-e', 'package', System.properties['testPackage'].toString()])
        cmd.addArguments(["${android.defaultConfig.testApplicationId}/${android.defaultConfig.testInstrumentationRunner}".toString()])
        cmd.verbose().execute(null)

        def adbPath = project.getBuildDir().getPath() + "/adb"
        file(adbPath).deleteDir()

        def adbTestPath = adbPath + "/test"
        file(adbTestPath).mkdirs()
        device.command(['pull', '/sdcard/testresults', adbTestPath]).verbose().execute()

        try {
            def adbScreenshotsPath = adbPath + "/robotium_screenshots"
            file(adbScreenshotsPath).mkdirs()
            device.command(['pull', '/sdcard/Robotium-Screenshots', adbScreenshotsPath]).verbose().execute()
        } catch (GradleScriptException) {}
    }
}
